import { Scope } from '@sentry/types';
/**
 * @param fn function to run
 * @returns function which runs in the newly created domain or in the existing one
 */
export declare function domainify<A extends unknown[], R>(fn: (...args: A) => R): (...args: A) => R | void;
/**
 * @param source function to be wrapped
 * @param wrap wrapping function that takes source and returns a wrapper
 * @param overrides properties to override in the source
 * @returns wrapped function
 */
export declare function proxyFunction<A extends any[], R, F extends (...args: A) => R>(source: F, wrap: (source: F) => F, overrides?: Record<PropertyKey, unknown>): F;
/**
 * Marks an event as unhandled by adding a span processor to the passed scope.
 */
export declare function markEventUnhandled(scope: Scope): Scope;
//# sourceMappingURL=utils.d.ts.map
