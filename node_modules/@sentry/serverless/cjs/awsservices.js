Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');
const node = require('@sentry/node');
const utils = require('@sentry/utils');

const INTEGRATION_NAME = 'AWSServices';

const SETUP_CLIENTS = new WeakMap();

const _awsServicesIntegration = ((options = {}) => {
  const optional = options.optional || false;
  return {
    name: INTEGRATION_NAME,
    setupOnce() {
      try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const awsModule = require('aws-sdk/global') ;
        utils.fill(awsModule.Service.prototype, 'makeRequest', wrapMakeRequest);
      } catch (e) {
        if (!optional) {
          throw e;
        }
      }
    },
    setup(client) {
      SETUP_CLIENTS.set(client, true);
    },
  };
}) ;

const awsServicesIntegration = core.defineIntegration(_awsServicesIntegration);

/**
 * AWS Service Request Tracking.
 *
 * @deprecated Use `awsServicesIntegration()` instead.
 */
// eslint-disable-next-line deprecation/deprecation
const AWSServices = core.convertIntegrationFnToClass(
  INTEGRATION_NAME,
  awsServicesIntegration,
) ;

// eslint-disable-next-line deprecation/deprecation

/**
 * Patches AWS SDK request to create `http.client` spans.
 */
function wrapMakeRequest(
  orig,
) {
  return function ( operation, params, callback) {
    let span;
    const req = orig.call(this, operation, params);

    if (SETUP_CLIENTS.has(node.getClient() )) {
      req.on('afterBuild', () => {
        span = node.startInactiveSpan({
          name: describe(this, operation, params),
          onlyIfParent: true,
          op: 'http.client',
          attributes: {
            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.serverless',
          },
        });
      });
      req.on('complete', () => {
        if (span) {
          span.end();
        }
      });
    }

    if (callback) {
      req.send(callback);
    }
    return req;
  };
}

/** Describes an operation on generic AWS service */
function describe(service, operation, params) {
  let ret = `aws.${service.serviceIdentifier}.${operation}`;
  if (params === undefined) {
    return ret;
  }
  switch (service.serviceIdentifier) {
    case 's3':
      ret += describeS3Operation(operation, params);
      break;
    case 'lambda':
      ret += describeLambdaOperation(operation, params);
      break;
  }
  return ret;
}

/** Describes an operation on AWS Lambda service */
function describeLambdaOperation(_operation, params) {
  let ret = '';
  if ('FunctionName' in params) {
    ret += ` ${params.FunctionName}`;
  }
  return ret;
}

/** Describes an operation on AWS S3 service */
function describeS3Operation(_operation, params) {
  let ret = '';
  if ('Bucket' in params) {
    ret += ` ${params.Bucket}`;
  }
  return ret;
}

exports.AWSServices = AWSServices;
exports.awsServicesIntegration = awsServicesIntegration;
//# sourceMappingURL=awsservices.js.map
